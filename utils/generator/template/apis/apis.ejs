export async function _<%=scope%>(client: any, params: any): Promise<any> {
  let response = {data: ''};
  switch (params.name) {
<% Object.entries(data).forEach(([operationId, endpoint]) => { -%>
    case "<%= endpoint.name %>": {
<% if (endpoint.method === "GET") { -%>
      let path = `<%- endpoint.path -%>`;
      response = await client.get(path, { params: params.arguments.query });
<% } -%>
<% if (endpoint.method === "PUT") { -%>
      let path = `<%- endpoint.path -%>`;
      if (params.arguments.body) {
        response = await client.put(path, params.arguments.body, { params: params.arguments.query });
      } else {
        response = await client.put(path, { params: params.arguments.query });
      }
<% } -%>
<% if (endpoint.method === "POST") { -%>
      let path = `<%- endpoint.path -%>`;
      if (params.arguments.body) {
        response = await client.post(path, params.arguments.body, { params: params.arguments.query });
      } else {
        response = await client.post(path, { params: params.arguments.query });
      }
<% } -%>
<% if (endpoint.method === "DELETE") { -%>
      let path = `<%- endpoint.path -%>`;
      if (params.arguments.body) {
        response = await client.delete(path, params.arguments.body, { params: params.arguments.query });
      } else {
        response = await client.delete(path, { params: params.arguments.query });
      }
<% } -%>
      const data = response.data;
      return {
        ok: true,
        data: data,
        response_metadata: { next_cursor: "" },
      };
    }
<% }); -%>
    default:
      throw new Error(`Unknown tool: ${params.name}`);
  }
}

export const <%= scope %>Endpoints = [
  <%- Object.values(data).map(endpoint => `"${endpoint.name}"`).join(',\n  ') %>
];
